{"remainingRequest":"/Users/maguodong/Documents/projects/luffycity/web im/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/maguodong/Documents/projects/luffycity/web im/src/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/maguodong/Documents/projects/luffycity/web im/src/index.vue","mtime":1576188392000},{"path":"/Users/maguodong/Documents/projects/luffycity/web im/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maguodong/Documents/projects/luffycity/web im/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/maguodong/Documents/projects/luffycity/web im/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maguodong/Documents/projects/luffycity/web im/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Notification } from 'element-ui'\nimport { mapState } from 'vuex'\nimport CurrentConversation from './components/conversation/current-conversation'\nimport SideBar from './components/layout/side-bar'\nimport Login from './components/user/login'\nimport ImagePreviewer from './components/message/image-previewer.vue'\nimport { translateGroupSystemNotice } from './utils/common'\nimport QrCodeList from './components/qr-code-list'\nimport MTA from './utils/mta'\n\nexport default {\n  title: 'TIMSDK DEMO',\n  components: {\n    Login,\n    SideBar,\n    CurrentConversation,\n    ImagePreviewer,\n    QrCodeList\n  },\n\n  computed: {\n    ...mapState({\n      currentUserProfile: state => state.user.currentUserProfile,\n      currentConversation: state => state.conversation.currentConversation,\n      isLogin: state => state.user.isLogin,\n      isSDKReady: state => state.user.isSDKReady\n    }),\n    // 是否显示 Loading 状态\n    showLoading() {\n      return !this.isSDKReady\n    }\n  },\n\n  mounted() {\n    // 初始化监听器\n    this.initListener()\n  },\n\n  watch: {\n    isLogin(next) {\n      if (next) {\n        MTA.clickStat('link_two', { show: 'true' })\n      }\n    }\n  },\n\n  methods: {\n    initListener() {\n      // 登录成功后会触发 SDK_READY 事件，该事件触发后，可正常使用 SDK 接口\n      this.tim.on(this.TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this)\n      // SDK NOT READT\n      this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this)\n      // 被踢出\n      this.tim.on(this.TIM.EVENT.KICKED_OUT, () => {\n        this.$store.commit('showMessage', {\n          message: '被踢出，请重新登录。',\n          type: 'error'\n        })\n        this.$store.commit('toggleIsLogin', false)\n        this.$store.commit('reset')\n      })\n      // SDK内部出错\n      this.tim.on(this.TIM.EVENT.ERROR, this.onError)\n      // 收到新消息\n      this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage)\n      // 会话列表更新\n      this.tim.on(this.TIM.EVENT.CONVERSATION_LIST_UPDATED, event => {\n        this.$store.commit('updateConversationList', event.data)\n      })\n      // 群组列表更新\n      this.tim.on(this.TIM.EVENT.GROUP_LIST_UPDATED, event => {\n        this.$store.commit('updateGroupList', event.data)\n      })\n      // 收到新的群系统通知\n      this.tim.on(this.TIM.EVENT.GROUP_SYSTEM_NOTICE_RECEIVED, event => {\n        const isKickedout = event.data.type === 4\n        const isCurrentConversation =\n          `GROUP${event.data.message.payload.groupProfile.groupID}` ===\n          this.currentConversation.conversationID\n        // 在当前会话被踢，需reset当前会话\n        if (isKickedout && isCurrentConversation) {\n          this.$store.commit('resetCurrentConversation')\n        }\n        Notification({\n          title: '新系统通知',\n          message: translateGroupSystemNotice(event.data.message),\n          duration: 3000,\n          onClick: () => {\n            const SystemConversationID = '@TIM#SYSTEM'\n            this.$store.dispatch('checkoutConversation', SystemConversationID)\n          }\n        })\n      })\n    },\n    onReceiveMessage({ data: messageList }) {\n      this.handleAt(messageList)\n      this.handleQuitGroupTip(messageList)\n      this.$store.commit('pushCurrentMessageList', messageList)\n    },\n    onError({ data }) {\n      if (data.message !== 'Network Error') {\n        this.$store.commit('showMessage', {\n          message: data.message,\n          type: 'error'\n        })\n      }\n    },\n    onReadyStateUpdate({ name }) {\n      const isSDKReady = name === this.TIM.EVENT.SDK_READY ? true : false\n      this.$store.commit('toggleIsSDKReady', isSDKReady)\n\n      if (isSDKReady) {\n        this.tim\n          .getMyProfile()\n          .then(({ data }) => {\n            this.$store.commit('updateCurrentUserProfile', data)\n          })\n          .catch(error => {\n            this.$store.commit('showMessage', {\n              type: 'error',\n              message: error.message\n            })\n          })\n        this.$store.dispatch('getBlacklist')\n      }\n    },\n    /**\n     * 处理 @ 我的消息\n     * @param {Message[]} messageList\n     */\n    handleAt(messageList) {\n      // 筛选有 @ 符号的文本消息\n      const atTextMessageList = messageList.filter(\n        message =>\n          message.type === this.TIM.TYPES.MSG_TEXT &&\n          message.payload.text.includes('@')\n      )\n      for (let i = 0; i < atTextMessageList.length; i++) {\n        const message = atTextMessageList[i]\n        const matched = message.payload.text.match(/@\\w+/g)\n        if (!matched) {\n          continue\n        }\n        // @ 我的\n        if (matched.includes(`@${this.currentUserProfile.userID}`)) {\n          // 当前页面不可见时，调用window.Notification接口，系统级别通知。\n          if (this.$store.getters.hidden) {\n            this.notifyMe(message)\n          }\n          Notification({\n            title: `有人在群${message.conversationID.slice(5)}提到了你`,\n            message: message.payload.text,\n            duration: 3000\n          })\n          this.$bus.$emit('new-messsage-at-me', {\n            data: { conversationID: message.conversationID }\n          })\n        }\n      }\n    },\n    /**\n     * 使用 window.Notification 进行全局的系统通知\n     * @param {Message} message\n     */\n    notifyMe(message) {\n      // 需检测浏览器支持和用户授权\n      if (!('Notification' in window)) {\n        return\n      } else if (window.Notification.permission === 'granted') {\n        this.handleNotify(message)\n      } else if (window.Notification.permission !== 'denied') {\n        window.Notification.requestPermission().then(permission => {\n          // 如果用户同意，就可以向他们发送通知\n          if (permission === 'granted') {\n            this.handleNotify(message)\n          }\n        })\n      }\n    },\n    handleNotify(message) {\n      const notification = new window.Notification('有人提到了你', {\n        icon: 'https://webim-1252463788.file.myqcloud.com/demo/img/logo.dc3be0d4.png',\n        body: message.payload.text\n      })\n      notification.onclick = () => {\n        window.focus()\n        this.$store.dispatch('checkoutConversation', message.conversationID)\n        notification.close()\n      }\n    },\n    handleLinkClick() {\n      MTA.clickStat('link_two', { click: 'true' })\n    },\n    /**\n     * 收到有群成员退群/被踢出的groupTip时，需要将相关群成员从当前会话的群成员列表中移除\n     * @param {Message[]} messageList\n     */\n    handleQuitGroupTip(messageList) {\n      // 筛选出当前会话的退群/被踢群的 groupTip\n      const groupTips = messageList.filter(message => {\n        return this.currentConversation.conversationID === message.conversationID &&\n          message.type === this.TIM.TYPES.MSG_GRP_TIP &&\n          (message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_QUIT || \n          message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_KICKED_OUT) \n      })\n      // 清理当前会话的群成员列表\n      if (groupTips.length > 0) {\n        groupTips.forEach(groupTip => {\n          if (Array.isArray(groupTip.payload.userIDList) || groupTip.payload.userIDList.length > 0) {\n            this.$store.commit('deleteGroupMemberList', groupTip.payload.userIDList)\n          }\n        })\n      }\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"index.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div>\n    <div id=\"wrapper\" v-if=\"!isLogin\">\n      <login />\n      <qr-code-list />\n    </div>\n    <div\n      class=\"loading\"\n      v-else\n      v-loading=\"showLoading\"\n      element-loading-text=\"正在拼命初始化...\"\n      element-loading-background=\"rgba(0, 0, 0, 0.8)\"\n    >\n      <div class=\"chat-wrapper\">\n        <el-row>\n          <el-col :xs=\"10\" :sm=\"10\" :md=\"8\" :lg=\"8\" :xl=\"7\">\n            <side-bar />\n          </el-col>\n          <el-col :xs=\"14\" :sm=\"14\" :md=\"16\" :lg=\"16\" :xl=\"17\">\n            <current-conversation />\n          </el-col>\n        </el-row>\n        <a\n          class=\"official-link\"\n          href=\"https://cloud.tencent.com/product/im\"\n          target=\"_blank\"\n          @click=\"handleLinkClick\"\n        >登录 即时通信IM 官网，了解更多体验方式</a>\n      </div>\n      <image-previewer />\n    </div>\n    <div class=\"bg\"></div>\n  </div>\n</template>\n\n<script>\nimport { Notification } from 'element-ui'\nimport { mapState } from 'vuex'\nimport CurrentConversation from './components/conversation/current-conversation'\nimport SideBar from './components/layout/side-bar'\nimport Login from './components/user/login'\nimport ImagePreviewer from './components/message/image-previewer.vue'\nimport { translateGroupSystemNotice } from './utils/common'\nimport QrCodeList from './components/qr-code-list'\nimport MTA from './utils/mta'\n\nexport default {\n  title: 'TIMSDK DEMO',\n  components: {\n    Login,\n    SideBar,\n    CurrentConversation,\n    ImagePreviewer,\n    QrCodeList\n  },\n\n  computed: {\n    ...mapState({\n      currentUserProfile: state => state.user.currentUserProfile,\n      currentConversation: state => state.conversation.currentConversation,\n      isLogin: state => state.user.isLogin,\n      isSDKReady: state => state.user.isSDKReady\n    }),\n    // 是否显示 Loading 状态\n    showLoading() {\n      return !this.isSDKReady\n    }\n  },\n\n  mounted() {\n    // 初始化监听器\n    this.initListener()\n  },\n\n  watch: {\n    isLogin(next) {\n      if (next) {\n        MTA.clickStat('link_two', { show: 'true' })\n      }\n    }\n  },\n\n  methods: {\n    initListener() {\n      // 登录成功后会触发 SDK_READY 事件，该事件触发后，可正常使用 SDK 接口\n      this.tim.on(this.TIM.EVENT.SDK_READY, this.onReadyStateUpdate, this)\n      // SDK NOT READT\n      this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.onReadyStateUpdate, this)\n      // 被踢出\n      this.tim.on(this.TIM.EVENT.KICKED_OUT, () => {\n        this.$store.commit('showMessage', {\n          message: '被踢出，请重新登录。',\n          type: 'error'\n        })\n        this.$store.commit('toggleIsLogin', false)\n        this.$store.commit('reset')\n      })\n      // SDK内部出错\n      this.tim.on(this.TIM.EVENT.ERROR, this.onError)\n      // 收到新消息\n      this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.onReceiveMessage)\n      // 会话列表更新\n      this.tim.on(this.TIM.EVENT.CONVERSATION_LIST_UPDATED, event => {\n        this.$store.commit('updateConversationList', event.data)\n      })\n      // 群组列表更新\n      this.tim.on(this.TIM.EVENT.GROUP_LIST_UPDATED, event => {\n        this.$store.commit('updateGroupList', event.data)\n      })\n      // 收到新的群系统通知\n      this.tim.on(this.TIM.EVENT.GROUP_SYSTEM_NOTICE_RECEIVED, event => {\n        const isKickedout = event.data.type === 4\n        const isCurrentConversation =\n          `GROUP${event.data.message.payload.groupProfile.groupID}` ===\n          this.currentConversation.conversationID\n        // 在当前会话被踢，需reset当前会话\n        if (isKickedout && isCurrentConversation) {\n          this.$store.commit('resetCurrentConversation')\n        }\n        Notification({\n          title: '新系统通知',\n          message: translateGroupSystemNotice(event.data.message),\n          duration: 3000,\n          onClick: () => {\n            const SystemConversationID = '@TIM#SYSTEM'\n            this.$store.dispatch('checkoutConversation', SystemConversationID)\n          }\n        })\n      })\n    },\n    onReceiveMessage({ data: messageList }) {\n      this.handleAt(messageList)\n      this.handleQuitGroupTip(messageList)\n      this.$store.commit('pushCurrentMessageList', messageList)\n    },\n    onError({ data }) {\n      if (data.message !== 'Network Error') {\n        this.$store.commit('showMessage', {\n          message: data.message,\n          type: 'error'\n        })\n      }\n    },\n    onReadyStateUpdate({ name }) {\n      const isSDKReady = name === this.TIM.EVENT.SDK_READY ? true : false\n      this.$store.commit('toggleIsSDKReady', isSDKReady)\n\n      if (isSDKReady) {\n        this.tim\n          .getMyProfile()\n          .then(({ data }) => {\n            this.$store.commit('updateCurrentUserProfile', data)\n          })\n          .catch(error => {\n            this.$store.commit('showMessage', {\n              type: 'error',\n              message: error.message\n            })\n          })\n        this.$store.dispatch('getBlacklist')\n      }\n    },\n    /**\n     * 处理 @ 我的消息\n     * @param {Message[]} messageList\n     */\n    handleAt(messageList) {\n      // 筛选有 @ 符号的文本消息\n      const atTextMessageList = messageList.filter(\n        message =>\n          message.type === this.TIM.TYPES.MSG_TEXT &&\n          message.payload.text.includes('@')\n      )\n      for (let i = 0; i < atTextMessageList.length; i++) {\n        const message = atTextMessageList[i]\n        const matched = message.payload.text.match(/@\\w+/g)\n        if (!matched) {\n          continue\n        }\n        // @ 我的\n        if (matched.includes(`@${this.currentUserProfile.userID}`)) {\n          // 当前页面不可见时，调用window.Notification接口，系统级别通知。\n          if (this.$store.getters.hidden) {\n            this.notifyMe(message)\n          }\n          Notification({\n            title: `有人在群${message.conversationID.slice(5)}提到了你`,\n            message: message.payload.text,\n            duration: 3000\n          })\n          this.$bus.$emit('new-messsage-at-me', {\n            data: { conversationID: message.conversationID }\n          })\n        }\n      }\n    },\n    /**\n     * 使用 window.Notification 进行全局的系统通知\n     * @param {Message} message\n     */\n    notifyMe(message) {\n      // 需检测浏览器支持和用户授权\n      if (!('Notification' in window)) {\n        return\n      } else if (window.Notification.permission === 'granted') {\n        this.handleNotify(message)\n      } else if (window.Notification.permission !== 'denied') {\n        window.Notification.requestPermission().then(permission => {\n          // 如果用户同意，就可以向他们发送通知\n          if (permission === 'granted') {\n            this.handleNotify(message)\n          }\n        })\n      }\n    },\n    handleNotify(message) {\n      const notification = new window.Notification('有人提到了你', {\n        icon: 'https://webim-1252463788.file.myqcloud.com/demo/img/logo.dc3be0d4.png',\n        body: message.payload.text\n      })\n      notification.onclick = () => {\n        window.focus()\n        this.$store.dispatch('checkoutConversation', message.conversationID)\n        notification.close()\n      }\n    },\n    handleLinkClick() {\n      MTA.clickStat('link_two', { click: 'true' })\n    },\n    /**\n     * 收到有群成员退群/被踢出的groupTip时，需要将相关群成员从当前会话的群成员列表中移除\n     * @param {Message[]} messageList\n     */\n    handleQuitGroupTip(messageList) {\n      // 筛选出当前会话的退群/被踢群的 groupTip\n      const groupTips = messageList.filter(message => {\n        return this.currentConversation.conversationID === message.conversationID &&\n          message.type === this.TIM.TYPES.MSG_GRP_TIP &&\n          (message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_QUIT || \n          message.payload.operationType === this.TIM.TYPES.GRP_TIP_MBR_KICKED_OUT) \n      })\n      // 清理当前会话的群成员列表\n      if (groupTips.length > 0) {\n        groupTips.forEach(groupTip => {\n          if (Array.isArray(groupTip.payload.userIDList) || groupTip.payload.userIDList.length > 0) {\n            this.$store.commit('deleteGroupMemberList', groupTip.payload.userIDList)\n          }\n        })\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\">\nbody {\n  overflow: hidden;\n  margin: 0;\n  font-family: 'Microsoft YaHei', '微软雅黑', 'MicrosoftJhengHei', 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'STHeiti', 'WenQuanYi Micro Hei', SimSun, sans-serif;\n  // font-family  \"Helvetica Neue\", Helvetica, Arial, \"PingFang SC\", \"Hiragino Sans GB\", \"Heiti SC\", \"Microsoft YaHei\", \"WenQuanYi Micro Hei\", sans-serif\n  // text-shadow: $regular 0 0 0.05em\n  background-color: $bg;\n  -ms-scroll-chaining: chained;\n  -ms-overflow-style: none;\n  -ms-content-zooming: zoom;\n  -ms-scroll-rails: none;\n  -ms-content-zoom-limit-min: 100%;\n  -ms-content-zoom-limit-max: 500%;\n  -ms-scroll-snap-type: proximity;\n  -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\n  -ms-overflow-style: none;\n  overflow: auto;\n\n  div {\n    box-sizing: border-box;\n\n    &::before, &::after {\n      box-sizing: border-box;\n    }\n  }\n}\n\n#wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  padding-top: 100px;\n}\n\n// TODO filter mac chrome 会有问题，下次修改可以去掉\n.bg {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: -1;\n  background: url('~@/./assets/image/bg.jpg') no-repeat 0 0;\n  background-size: cover;\n  // filter blur(67px)\n}\n\n.loading {\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n}\n\n.text-ellipsis {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.chat-wrapper {\n  margin-top: 8vh;\n  width: $width;\n  height: $height;\n  max-width: 1280px;\n  box-shadow: 0 11px 20px 0 rgba(0, 0, 0, 0.3);\n\n  .official-link {\n    display: flex;\n    text-decoration: none;\n    color: #38c9ff;\n    width: fit-content;\n    float: right;\n    height: 45px;\n    align-items: center;\n  }\n}\n\n/* 设置滚动条的样式 */\n::-webkit-scrollbar {\n  width: 3px;\n  height: 3px;\n}\n\n/* 滚动槽 */\n::-webkit-scrollbar-track {\n  border-radius: 10px;\n}\n\n/* 滚动条滑块 */\n::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n  background: rgba(0, 0, 0, 0.1);\n}\n</style>\n"]}]}