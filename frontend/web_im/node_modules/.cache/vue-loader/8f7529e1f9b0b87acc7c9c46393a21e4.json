{"remainingRequest":"/Users/maguodong/Documents/projects/luffycity/web im/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/maguodong/Documents/projects/luffycity/web im/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/maguodong/Documents/projects/luffycity/web im/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/maguodong/Documents/projects/luffycity/web im/src/components/conversation/conversationProfile/group-profile.vue?vue&type=template&id=c15e7394&","dependencies":[{"path":"/Users/maguodong/Documents/projects/luffycity/web im/src/components/conversation/conversationProfile/group-profile.vue","mtime":1576188392000},{"path":"/Users/maguodong/Documents/projects/luffycity/web im/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maguodong/Documents/projects/luffycity/web im/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/maguodong/Documents/projects/luffycity/web im/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maguodong/Documents/projects/luffycity/web im/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"group-member-list\", { attrs: { groupProfile: _vm.groupProfile } }),\n      _c(\"div\", { staticClass: \"group-info-content\" }, [\n        _c(\"div\", { staticClass: \"info-item\" }, [\n          _c(\"div\", { staticClass: \"label\" }, [_vm._v(\"群ID\")]),\n          _c(\"div\", { staticClass: \"content\" }, [\n            _vm._v(_vm._s(_vm.groupProfile.groupID))\n          ])\n        ]),\n        _c(\n          \"div\",\n          { staticClass: \"info-item\" },\n          [\n            _c(\"div\", { staticClass: \"label\" }, [\n              _vm._v(\"\\n        群头像\\n        \"),\n              _vm.editable\n                ? _c(\"i\", {\n                    staticClass: \"el-icon-edit\",\n                    staticStyle: { cursor: \"pointer\", \"font-size\": \"16px\" },\n                    on: {\n                      click: function($event) {\n                        _vm.showEditFaceUrl = true\n                        _vm.inputFocus(\"editFaceUrl\")\n                      }\n                    }\n                  })\n                : _vm._e()\n            ]),\n            !_vm.showEditFaceUrl\n              ? _c(\n                  \"div\",\n                  { staticClass: \"content\" },\n                  [_c(\"avatar\", { attrs: { src: _vm.groupProfile.avatar } })],\n                  1\n                )\n              : _c(\"el-input\", {\n                  ref: \"editFaceUrl\",\n                  attrs: { autofocus: \"\", size: \"mini\" },\n                  on: {\n                    blur: function($event) {\n                      _vm.showEditFaceUrl = false\n                    }\n                  },\n                  nativeOn: {\n                    keydown: function($event) {\n                      if (\n                        !$event.type.indexOf(\"key\") &&\n                        _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                      ) {\n                        return null\n                      }\n                      return _vm.editFaceUrl($event)\n                    }\n                  },\n                  model: {\n                    value: _vm.avatar,\n                    callback: function($$v) {\n                      _vm.avatar = $$v\n                    },\n                    expression: \"avatar\"\n                  }\n                })\n          ],\n          1\n        ),\n        _c(\"div\", { staticClass: \"info-item\" }, [\n          _c(\"div\", { staticClass: \"label\" }, [_vm._v(\"群类型\")]),\n          _c(\"div\", { staticClass: \"content\" }, [\n            _vm._v(_vm._s(_vm.groupProfile.type))\n          ])\n        ]),\n        _c(\n          \"div\",\n          { staticClass: \"info-item\" },\n          [\n            _c(\"div\", { staticClass: \"label\" }, [\n              _vm._v(\"\\n        群名称\\n        \"),\n              _vm.editable\n                ? _c(\"i\", {\n                    staticClass: \"el-icon-edit\",\n                    staticStyle: { cursor: \"pointer\", \"font-size\": \"16px\" },\n                    on: {\n                      click: function($event) {\n                        _vm.showEditName = true\n                        _vm.inputFocus(\"editName\")\n                      }\n                    }\n                  })\n                : _vm._e()\n            ]),\n            !_vm.showEditName\n              ? _c(\n                  \"div\",\n                  {\n                    staticClass: \"content text-ellipsis\",\n                    attrs: { title: _vm.groupProfile.name }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n        \" +\n                        _vm._s(_vm.groupProfile.name || \"暂无\") +\n                        \"\\n      \"\n                    )\n                  ]\n                )\n              : _c(\"el-input\", {\n                  ref: \"editName\",\n                  attrs: { autofocus: \"\", size: \"mini\" },\n                  on: {\n                    blur: function($event) {\n                      _vm.showEditName = false\n                    }\n                  },\n                  nativeOn: {\n                    keydown: function($event) {\n                      if (\n                        !$event.type.indexOf(\"key\") &&\n                        _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                      ) {\n                        return null\n                      }\n                      return _vm.editName($event)\n                    }\n                  },\n                  model: {\n                    value: _vm.name,\n                    callback: function($$v) {\n                      _vm.name = $$v\n                    },\n                    expression: \"name\"\n                  }\n                })\n          ],\n          1\n        ),\n        _c(\n          \"div\",\n          { staticClass: \"info-item\" },\n          [\n            _c(\"div\", { staticClass: \"label\" }, [\n              _vm._v(\"\\n        群介绍\\n        \"),\n              _vm.editable\n                ? _c(\"i\", {\n                    staticClass: \"el-icon-edit\",\n                    staticStyle: { cursor: \"pointer\", \"font-size\": \"16px\" },\n                    on: {\n                      click: function($event) {\n                        _vm.showEditIntroduction = true\n                        _vm.inputFocus(\"editIntroduction\")\n                      }\n                    }\n                  })\n                : _vm._e()\n            ]),\n            !_vm.showEditIntroduction\n              ? _c(\n                  \"div\",\n                  {\n                    staticClass: \"long-content\",\n                    attrs: { title: _vm.groupProfile.introduction }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n        \" +\n                        _vm._s(_vm.groupProfile.introduction || \"暂无\") +\n                        \"\\n      \"\n                    )\n                  ]\n                )\n              : _c(\"el-input\", {\n                  ref: \"editIntroduction\",\n                  attrs: { autofocus: \"\", size: \"mini\" },\n                  on: {\n                    blur: function($event) {\n                      _vm.showEditIntroduction = false\n                    }\n                  },\n                  nativeOn: {\n                    keydown: function($event) {\n                      if (\n                        !$event.type.indexOf(\"key\") &&\n                        _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                      ) {\n                        return null\n                      }\n                      return _vm.editIntroduction($event)\n                    }\n                  },\n                  model: {\n                    value: _vm.introduction,\n                    callback: function($$v) {\n                      _vm.introduction = $$v\n                    },\n                    expression: \"introduction\"\n                  }\n                })\n          ],\n          1\n        ),\n        _c(\n          \"div\",\n          { staticClass: \"info-item\" },\n          [\n            _c(\"div\", { staticClass: \"label\" }, [\n              _vm._v(\"\\n        群公告\\n        \"),\n              _vm.editable\n                ? _c(\"i\", {\n                    staticClass: \"el-icon-edit\",\n                    staticStyle: { cursor: \"pointer\", \"font-size\": \"16px\" },\n                    on: {\n                      click: function($event) {\n                        _vm.showEditNotification = true\n                        _vm.inputFocus(\"editNotification\")\n                      }\n                    }\n                  })\n                : _vm._e()\n            ]),\n            !_vm.showEditNotification\n              ? _c(\n                  \"div\",\n                  {\n                    staticClass: \"long-content\",\n                    attrs: { title: _vm.groupProfile.notification }\n                  },\n                  [\n                    _vm._v(\n                      \"\\n        \" +\n                        _vm._s(_vm.groupProfile.notification || \"暂无\") +\n                        \"\\n      \"\n                    )\n                  ]\n                )\n              : _c(\"el-input\", {\n                  ref: \"editNotification\",\n                  attrs: { autofocus: \"\", size: \"mini\" },\n                  on: {\n                    blur: function($event) {\n                      _vm.showEditNotification = false\n                    }\n                  },\n                  nativeOn: {\n                    keydown: function($event) {\n                      if (\n                        !$event.type.indexOf(\"key\") &&\n                        _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                      ) {\n                        return null\n                      }\n                      return _vm.editNotification($event)\n                    }\n                  },\n                  model: {\n                    value: _vm.notification,\n                    callback: function($$v) {\n                      _vm.notification = $$v\n                    },\n                    expression: \"notification\"\n                  }\n                })\n          ],\n          1\n        ),\n        _vm.groupProfile.type !== \"Private\"\n          ? _c(\n              \"div\",\n              { staticClass: \"info-item\" },\n              [\n                _c(\"div\", { staticClass: \"label\" }, [\n                  _vm._v(\"\\n        申请加群方式\\n        \"),\n                  _vm.editable\n                    ? _c(\"i\", {\n                        staticClass: \"el-icon-edit\",\n                        staticStyle: { cursor: \"pointer\", \"font-size\": \"16px\" },\n                        on: {\n                          click: function($event) {\n                            _vm.showEditJoinOption = true\n                            _vm.inputFocus(\"editJoinOption\")\n                          }\n                        }\n                      })\n                    : _vm._e()\n                ]),\n                _c(\n                  \"div\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value: !_vm.showEditJoinOption,\n                        expression: \"!showEditJoinOption\"\n                      }\n                    ],\n                    staticClass: \"content\"\n                  },\n                  [\n                    _vm._v(\n                      \"\\n        \" +\n                        _vm._s(_vm.joinOptionMap[_vm.groupProfile.joinOption]) +\n                        \"\\n      \"\n                    )\n                  ]\n                ),\n                _c(\n                  \"el-select\",\n                  {\n                    directives: [\n                      {\n                        name: \"show\",\n                        rawName: \"v-show\",\n                        value: _vm.showEditJoinOption,\n                        expression: \"showEditJoinOption\"\n                      }\n                    ],\n                    ref: \"editJoinOption\",\n                    attrs: { size: \"mini\", \"automatic-dropdown\": \"\" },\n                    on: {\n                      blur: function($event) {\n                        _vm.showEditJoinOption = false\n                      },\n                      change: _vm.editJoinOption\n                    },\n                    model: {\n                      value: _vm.joinOption,\n                      callback: function($$v) {\n                        _vm.joinOption = $$v\n                      },\n                      expression: \"joinOption\"\n                    }\n                  },\n                  [\n                    _c(\"el-option\", {\n                      attrs: { label: \"自由加入\", value: \"FreeAccess\" }\n                    }),\n                    _c(\"el-option\", {\n                      attrs: { label: \"需要验证\", value: \"NeedPermission\" }\n                    }),\n                    _c(\"el-option\", {\n                      attrs: { label: \"禁止加群\", value: \"DisableApply\" }\n                    })\n                  ],\n                  1\n                )\n              ],\n              1\n            )\n          : _vm._e(),\n        _c(\n          \"div\",\n          { staticClass: \"info-item\" },\n          [\n            _c(\"div\", { staticClass: \"label\" }, [\n              _vm._v(\"\\n        群消息提示类型\\n        \"),\n              _vm.editable\n                ? _c(\"i\", {\n                    staticClass: \"el-icon-edit\",\n                    staticStyle: { cursor: \"pointer\", \"font-size\": \"16px\" },\n                    on: {\n                      click: function($event) {\n                        _vm.showEditMessageRemindType = true\n                        _vm.inputFocus(\"editMessageRemindType\")\n                      }\n                    }\n                  })\n                : _vm._e()\n            ]),\n            _c(\n              \"div\",\n              {\n                directives: [\n                  {\n                    name: \"show\",\n                    rawName: \"v-show\",\n                    value: !_vm.showEditMessageRemindType,\n                    expression: \"!showEditMessageRemindType\"\n                  }\n                ],\n                staticClass: \"content\"\n              },\n              [\n                _vm._v(\n                  \"\\n        \" +\n                    _vm._s(\n                      _vm.messageRemindTypeMap[\n                        this.groupProfile.selfInfo.messageRemindType\n                      ]\n                    ) +\n                    \"\\n      \"\n                )\n              ]\n            ),\n            _c(\n              \"el-select\",\n              {\n                directives: [\n                  {\n                    name: \"show\",\n                    rawName: \"v-show\",\n                    value: _vm.showEditMessageRemindType,\n                    expression: \"showEditMessageRemindType\"\n                  }\n                ],\n                ref: \"editMessageRemindType\",\n                attrs: { size: \"mini\", \"automatic-dropdown\": \"\" },\n                on: {\n                  change: _vm.editMessageRemindType,\n                  blur: function($event) {\n                    _vm.showEditMessageRemindType = false\n                  }\n                },\n                model: {\n                  value: _vm.messageRemindType,\n                  callback: function($$v) {\n                    _vm.messageRemindType = $$v\n                  },\n                  expression: \"messageRemindType\"\n                }\n              },\n              [\n                _c(\"el-option\", {\n                  attrs: { label: \"接收消息并提示\", value: \"AcceptAndNotify\" }\n                }),\n                _c(\"el-option\", {\n                  attrs: { label: \"接收消息但不提示\", value: \"AcceptNotNotify\" }\n                }),\n                _c(\"el-option\", {\n                  attrs: { label: \"屏蔽消息\", value: \"Discard\" }\n                })\n              ],\n              1\n            )\n          ],\n          1\n        ),\n        _c(\n          \"div\",\n          { staticClass: \"info-item\" },\n          [\n            _c(\"div\", { staticClass: \"label\" }, [\n              _vm._v(\"\\n        我的群名片\\n        \"),\n              _c(\"i\", {\n                staticClass: \"el-icon-edit\",\n                staticStyle: { cursor: \"pointer\", \"font-size\": \"16px\" },\n                on: {\n                  click: function($event) {\n                    _vm.showEditNameCard = true\n                    _vm.inputFocus(\"editNameCard\")\n                  }\n                }\n              })\n            ]),\n            !_vm.showEditNameCard\n              ? _c(\"div\", { staticClass: \"content cursor-pointer\" }, [\n                  _vm._v(\n                    \"\\n        \" +\n                      _vm._s(_vm.groupProfile.selfInfo.nameCard || \"暂无\") +\n                      \"\\n      \"\n                  )\n                ])\n              : _c(\"el-input\", {\n                  ref: \"editNameCard\",\n                  attrs: { autofocus: \"\", size: \"mini\" },\n                  on: {\n                    blur: function($event) {\n                      _vm.showEditNameCard = false\n                    }\n                  },\n                  nativeOn: {\n                    keydown: function($event) {\n                      if (\n                        !$event.type.indexOf(\"key\") &&\n                        _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n                      ) {\n                        return null\n                      }\n                      return _vm.editNameCard($event)\n                    }\n                  },\n                  model: {\n                    value: _vm.nameCard,\n                    callback: function($$v) {\n                      _vm.nameCard = $$v\n                    },\n                    expression: \"nameCard\"\n                  }\n                })\n          ],\n          1\n        ),\n        _vm.isOwner\n          ? _c(\n              \"div\",\n              [\n                _c(\n                  \"el-button\",\n                  {\n                    attrs: { type: \"text\" },\n                    on: {\n                      click: function($event) {\n                        _vm.showChangeGroupOwner = true\n                      }\n                    }\n                  },\n                  [_vm._v(\"转让群组\")]\n                ),\n                _vm.showChangeGroupOwner\n                  ? _c(\"el-input\", {\n                      attrs: { placeholder: \"新群主的userID\", size: \"mini\" },\n                      on: {\n                        blur: function($event) {\n                          _vm.showChangeGroupOwner = false\n                        }\n                      },\n                      nativeOn: {\n                        keydown: function($event) {\n                          if (\n                            !$event.type.indexOf(\"key\") &&\n                            _vm._k(\n                              $event.keyCode,\n                              \"enter\",\n                              13,\n                              $event.key,\n                              \"Enter\"\n                            )\n                          ) {\n                            return null\n                          }\n                          return _vm.changeOwner($event)\n                        }\n                      },\n                      model: {\n                        value: _vm.newOwnerUserID,\n                        callback: function($$v) {\n                          _vm.newOwnerUserID = $$v\n                        },\n                        expression: \"newOwnerUserID\"\n                      }\n                    })\n                  : _vm._e()\n              ],\n              1\n            )\n          : _vm._e(),\n        _c(\n          \"div\",\n          [\n            _c(\n              \"el-button\",\n              {\n                staticStyle: { color: \"red\" },\n                attrs: { type: \"text\" },\n                on: { click: _vm.quitGroup }\n              },\n              [_vm._v(\"退出群组\")]\n            )\n          ],\n          1\n        ),\n        _vm.showDissmissGroup\n          ? _c(\n              \"div\",\n              [\n                _c(\n                  \"el-button\",\n                  {\n                    staticStyle: { color: \"red\" },\n                    attrs: { type: \"text\" },\n                    on: { click: _vm.dismissGroup }\n                  },\n                  [_vm._v(\"解散群组\")]\n                )\n              ],\n              1\n            )\n          : _vm._e()\n      ])\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}